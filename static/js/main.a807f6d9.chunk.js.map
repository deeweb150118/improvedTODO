{"version":3,"sources":["Components/AddItems.js","Components/AddByInput.js","App.js","serviceWorker.js","index.js"],"names":["AddItems","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","AddByInput","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","newTodoList","filter","Math","random","updatedTodoList","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8MA2BeA,EAvBE,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,MAAMC,EAAgB,EAAhBA,WACdC,EAASF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACR,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACvC,0BAAMC,QAAS,kBAAIR,EAAWI,EAAKG,MAAMH,EAAKK,aAKvD,uBAAGJ,UAAU,UAAb,qCAIN,OACE,yBAAKA,UAAU,oBACVJ,ICYMS,E,4MA5BdC,MAAQ,CACJF,QAAQ,I,EAEZG,aAAa,SAACC,GACV,EAAKC,SAAS,CACVL,QAAQI,EAAEE,OAAOC,S,EAGzBC,aAAa,SAACJ,GACVA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVL,QAAQ,M,uDAIf,OACC,6BACI,0BAAMY,SAAUC,KAAKL,cACjB,iDACA,2BAAOM,KAAK,OAAOC,SAAUF,KAAKV,aAAcI,MAAOM,KAAKX,MAAMF,gB,GArBpDgB,aCkCVC,E,4MAjCbf,MAAM,CACJZ,MAAM,CACJ,CAACU,QAAQ,gBAAgBF,GAAG,GAC5B,CAACE,QAAQ,kBAAkBF,GAAG,K,EAGlCP,WAAW,SAACO,GACV,IAAMoB,EAAY,EAAKhB,MAAMZ,MAAM6B,QAAO,SAAAxB,GACxC,OAAOA,EAAKG,KAAOA,KAErB,EAAKO,SAAS,CACZf,MAAM4B,K,EAGVP,QAAQ,SAAChB,GACPA,EAAKG,GAAGsB,KAAKC,SACb,IAAIC,EAAgB,GAAD,mBAAK,EAAKpB,MAAMZ,OAAhB,CAAsBK,IACzC,EAAKU,SAAS,CACZf,MAAMgC,K,uDAKR,OACE,yBAAK1B,UAAU,uBACb,wBAAIA,UAAU,oBAAd,UACD,kBAAC,EAAD,CAAUN,MAAOuB,KAAKX,MAAMZ,MAAOC,WAAYsB,KAAKtB,aAClD,kBAAC,EAAD,CAAYoB,QAASE,KAAKF,e,GA5BjBY,IAAMP,WCSJQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a807f6d9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n\r\n\r\nconst AddItems = ({todos,deleteTodo}) => {\r\n     const todoList=todos.length ? \r\n     ( todos.map(todo=>{\r\n         return (\r\n             <div className=\"collection-item\" key={todo.id}>\r\n                 <span onClick={()=>deleteTodo(todo.id)}>{todo.content}</span>\r\n             </div>\r\n         )\r\n     })) :(\r\n\r\n        <p className=\"center\">You have no todo's left yahooo!!!</p>\r\n     )\r\n     \r\n     \r\n  return(\r\n    <div className=\"todos collection\">\r\n        {todoList}\r\n    \r\n    </div>\r\n   )\r\n\r\n }\r\n\r\nexport default AddItems","import React, { Component } from 'react'\r\n\r\n\r\nclass AddByInput extends Component {\r\n state = {\r\n     content:''\r\n }\r\n handleChange=(e)=>{\r\n     this.setState({\r\n         content:e.target.value\r\n     })\r\n }\r\n handleSubmit=(e)=>{\r\n     e.preventDefault()\r\n     this.props.addTodo(this.state);\r\n     this.setState({\r\n         content:''\r\n     })\r\n }\r\n render() {\r\n  return(\r\n   <div>\r\n       <form onSubmit={this.handleSubmit}>\r\n           <label >Add new todo :</label>\r\n           <input type=\"text\" onChange={this.handleChange} value={this.state.content} />\r\n       </form>\r\n    </div>\r\n    )\r\n   }\r\n }\r\n\r\n\r\nexport default AddByInput","import React from 'react';\nimport AddItems from './Components/AddItems'\nimport AddByInput from './Components/AddByInput'\nclass App extends React.Component{\n  state={\n    todos:[\n      {content:\"buy some milk\",id:1},\n      {content:\"washing clothes\",id:2}\n    ]\n  }\n  deleteTodo=(id)=>{\n    const newTodoList=this.state.todos.filter(todo=>{\n      return todo.id !== id\n    })\n    this.setState({\n      todos:newTodoList\n    })\n  }\n  addTodo=(todo)=>{\n    todo.id=Math.random()\n    let updatedTodoList=[...this.state.todos,todo];\n    this.setState({\n      todos:updatedTodoList\n    })\n\n  }\n  render(){\n    return(\n      <div className=\" todo-app container\">\n        <h1 className=\"center blue-text\">Todo's</h1>\n       <AddItems todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n         <AddByInput addTodo={this.addTodo}/>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}